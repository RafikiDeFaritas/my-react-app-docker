services:
  web:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npm ci && npm run dev -- --host 0.0.0.0"
    ports:
      - "5173:5173"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - appnet

  db:
    image: postgres:16-alpine
    ports:
      - "${PG_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - appnet

  api:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./server:/app
    command: sh -c "npm install && npm start"
    environment:
      PGHOST: db
      PGPORT: 5432
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      CORS_ORIGIN: "http://localhost:5173"
      PORT: 3000
      JWT_SECRET: "change-this-in-prod"
      JWT_EXPIRES_IN: "7d"
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - appnet

  pgadmin:
    image: dpage/pgadmin4:8
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'   # mode desktop (facile pour d√©buter)
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - appnet

volumes:
  pgdata:
  pgadmin:

networks:
  appnet:
    driver: bridge
